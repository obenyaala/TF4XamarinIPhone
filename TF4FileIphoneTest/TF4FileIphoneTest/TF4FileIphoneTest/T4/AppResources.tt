<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
<#
    var project = FindProject();
    string className = Path.GetFileNameWithoutExtension(Host.TemplateFile);
    string resourceFileName = className + ".resx";
    string resourcesDir = Path.GetDirectoryName(Host.TemplateFile);
    string projectDir = Path.GetDirectoryName(project.FullName);
    string relativePath = resourcesDir.Substring(projectDir.Length);
    string resourcesFile = Host.ResolvePath(resourceFileName);
    string resourceNamespace = project.Name;
	if (!string.IsNullOrEmpty(relativePath))
    {
        resourceNamespace += relativePath.Replace('\\', '.');
	}
    string baseName = string.Format("{0}.{1}", resourceNamespace, className);
    var doc = XDocument.Load(resourcesFile);
    var entries =
        from d in doc.Root.Elements("data")
        select new
        {
            Name = d.Attribute("name").Value,
            Value = d.Element("value").Value
        };
#>

namespace <#= resourceNamespace #>
{
    using System;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]

    internal class <#= className #>
    {

        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal <#= className #>()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("<#= resourceNamespace #>.<#= className #>", typeof(<#= className #>).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

<# foreach(var entry in entries) { #>
        /// <summary>
        /// Returns a string similar to '<#= Ellipsis(entry.Value, 50) #>'
        /// </summary>
        internal static string <#= entry.Name #>
        {
            get { return nameof(<#= entry.Name #>); }
        }
<# } #>
    }
}
<#+
static string Ellipsis(string s, int maxLength)
{
    if (s.Length <= maxLength)
        return s;
    return s.Substring(0, maxLength) + "...";
}

Project FindProject()
{
    IServiceProvider serviceProvider = (IServiceProvider)Host;
    DTE dte = (DTE)serviceProvider.GetService(typeof(DTE));
    string templateFileName = Host.TemplateFile;
    var item = dte.Solution.FindProjectItem(Host.TemplateFile);
    if (item != null && item.ContainingProject != null)
        return item.ContainingProject;
    throw new InvalidOperationException("Can't find project name");
}

#>
